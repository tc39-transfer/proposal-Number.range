<!DOCTYPE html>
<meta charset="utf8" />
<link rel="stylesheet" href="./spec.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css" />
<script src="./spec.js"></script>
<pre class="metadata">
title: Proposal Number.range & BigInt.range
stage: 1
contributors: "Jack Works"
</pre>

<emu-clause id="sec-number">
    <h1>Number</h1>
    <emu-clause id="sec-number-range">
        <h1>Number.range(_start_, _end_, _option_)</h1>
        <emu-alg>
            1. Return ? Construct(%NumericRange%, « *"number"*, _start_, _end_, _option_ »).
        </emu-alg>
    </emu-clause>
</emu-clause>
<emu-clause id="sec-bigint">
    <h1>BigInt</h1>
    <emu-clause id="sec-bigint-range">
        <h1>BigInt.range(_start_, _end_, _option_)</h1>
        <emu-alg>
            1. Return ? Construct(%NumericRange%, « *"bigint"*, _start_, _end_, _option_ »).
        </emu-alg>
    </emu-clause>
</emu-clause>
<emu-clause id="sec-numericrange-objects">
    <h1>NumericRange Objects</h1>

    <emu-clause id="sec-numericrange-constructor">
        <h1>The NumericRange Constructor</h1>
        <p>The NumericRange constructor:</p>
        <ul>
            <li>is the intrinsic object <dfn>%NumericRange%</dfn>.</li>
            <li>is not an property on the global object.</li>
            <li>is not intended to be called as a function and will throw an exception when called in that manner.</li>
            <li>creates and initializes a new NumericRange object when called as a constructor.</li>
            <li>is designed to be subclassable. It may be used as the value in an `extends` clause of a class definition. Subclass constructors that intend to inherit the specified `NumericRange` behaviour must include a `super` call to the `NumericRange` constructor to create and initialize the subclass instance with the internal state necessary to support the `NumericRange.prototype` built-in methods.</li>
        </ul>

        <emu-clause id="sec-numericrange">
            <h1>NumericRange (_type_, _start_, _end_, [_option_])</h1>
            <p>When the `NumericRange` function is called with arguments _type_, _start_, _end_ and optional argument _option_, the following steps are taken:</p>
            <emu-alg>
                1. If NewTarget is *undefined*, throw a *TypeError* exception.
                1. If _type_ is not *"number"* or *"bigint"*, throw a *TypeError* exception.
                1. If Type(_start_) is not _type_, throw a *TypeError* exception.
                1. If _type_ is *"bigint"*, let _zero_ be *0n*, else let _zero_ be *0*.
                1. If _type_ is *"bigint"*, let _one_ be *1n*, else let _one_ be *1*.
                1. Note: <emu-note type="editor">Allowing all kinds of number (number, bigint, decimals, ...) to range from a finite number to infinity.</emu-note>
                1. If _end_ is not *+∞* or *-∞* and if Type(_end_) is not _type_, throw a *TypeError* exception.
                1. If _start_ is *+∞* or *-∞*, throws a *RangeError* exception.
                1. Let _ifIncrease_ be end > start.
                1. Let _isInclusiveEnd_ be *false*.
                <!-- Normalize options -->
                1. If _option_ is *undefined* or *null*, let _step_ be *undefined*.
                1. Else if Type(_option_) is *object*,
                    1. Let _step_ be Get(_option_, "step").
                    1. Let _isInclusiveEnd_ be ToBoolean(Get(_option_, "inclusive")).
                1. Else if Type(_option_) is _type_, let _step_ be _option_.
                1. Else, throw a *TypeError* exception.
                <!-- Normalize options end -->
                1. If _step_ is *undefined* or *null*,
                    1. If _ifIncrease_ is *true*, let _step_ be _one_.
                    1. Else let _step_ be -_one_.
                1. If Type(_step_) is not _type_, throws a *TypeError* exception.
                1. If _step_ is *+∞* or *-∞*, throws a *RangeError* exception.
                1. If _step_ is _zero_ and _start_ is not equal to _end_, throws an *RangeError* exception.
                1. Let _O_ be ? OrdinaryCreateFromConstructor(NewTarget, "%NumericRange.prototype%", « [[type]], [[start]], [[end]], [[step]], [[isInclusiveEnd]], [[isNumericRange]] »).
                1. Set _O_.[[type]] to _type_.
                1. Set _O_.[[start]] to _start_.
                1. Set _O_.[[end]] to _end_.
                1. Set _O_.[[step]] to _step_.
                1. Set _O_.[[isInclusiveEnd]] to _isInclusiveEnd_.
                1. Set _O_.[[isNumericRange]] to *true*.
                1. Return _O_.
            </emu-alg>
        </emu-clause>
    </emu-clause>

    <emu-clause id="sec-properties-of-the-numericrange-constructor">
        <h1>Properties of the NumericRange Constructor</h1>
        <p>The NumericRange constructor:</p>
        <ul>
            <li>as a [[Prototype]] internal slot whose value is %Function.prototype%.</li>
            <li>has the following properties:</li>
        </ul>

        <emu-clause id="sec-numericrange.prototype">
            <h1>NumericRange.prototype</h1>
            <p>The initial value of *NumericRange.prototype* is %NumericRange.prototype%.</p>
            <p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *false* }.</p>
        </emu-clause>
    </emu-clause>

    <emu-clause id="sec-properties-of-the-numericrange-prototype-object">
        <h1>Properties of the NumericRange Prototype Object</h1>
        <p>The NumericRange prototype object:</p>
        <ul>
            <li>is the intrinsic object <dfn>%NumericRange.prototype%</dfn>.</li>
            <li>is the initial value of the "*prototype*" property of %NumericRange%.</li>
            <li>is an ordinary object.</li>
            <li>is not a NumericRange instance and does not have internal slots of NumericRange instance have.</li>
        </ul>

        <emu-clause id="sec-numericrange.prototype.start">
            <h1>get NumericRange.prototype.start</h1>
            <p>NumericRange.prototype.start is an accessor property whose set accessor function is *undefined*. Its get accessor function performs the following steps:</p>

            <emu-alg>
                1. Let _O_ be *this* value.
                1. Perform ? RequireInternalSlot(_O_, [[ isNumericRange ]]).
                1. Return _O_.[[start]].
            </emu-alg>
        </emu-clause>
        <emu-clause id="sec-numericrange.prototype.end">
            <h1>get NumericRange.prototype.end</h1>
            <p>NumericRange.prototype.end is an accessor property whose set accessor function is *undefined*. Its get accessor function performs the following steps:</p>

            <emu-alg>
                1. Let _O_ be *this* value.
                1. Perform ? RequireInternalSlot(_O_, [[ isNumericRange ]]).
                1. Return _O_.[[end]].
            </emu-alg>
        </emu-clause>
        <emu-clause id="sec-numericrange.prototype.step">
            <h1>get NumericRange.prototype.step</h1>
            <p>NumericRange.prototype.step is an accessor property whose set accessor function is *undefined*. Its get accessor function performs the following steps:</p>

            <emu-alg>
                1. Let _O_ be *this* value.
                1. Perform ? RequireInternalSlot(_O_, [[ isNumericRange ]]).
                1. Return _O_.[[step]].
            </emu-alg>
        </emu-clause>
        <emu-clause id="sec-numericrange.prototype.type">
            <h1>get NumericRange.prototype.type</h1>
            <p>NumericRange.prototype.type is an accessor property whose set accessor function is *undefined*. Its get accessor function performs the following steps:</p>

            <emu-alg>
                1. Let _O_ be *this* value.
                1. Perform ? RequireInternalSlot(_O_, [[ isNumericRange ]]).
                1. Return _O_.[[type]].
            </emu-alg>
        </emu-clause>
        <emu-clause id="sec-numericrange.prototype.isinclusiveend">
            <h1>get NumericRange.prototype.isInclusiveEnd</h1>
            <p>NumericRange.prototype.isInclusiveEnd is an accessor property whose set accessor function is *undefined*. Its get accessor function performs the following steps:</p>

            <emu-alg>
                1. Let _O_ be *this* value.
                1. Perform ? RequireInternalSlot(_O_, [[ isNumericRange ]]).
                1. Return _O_.[[isInclusiveEnd]].
            </emu-alg>
        </emu-clause>
        <emu-clause id="sec-numericrange.prototype.values()">
            <h1>NumericRange.prototype.values()</h1>
            <p>The following steps are taken:</p>

            <emu-alg>
                1. Let _O_ be *this* value.
                1. Perform ? RequireInternalSlot(_O_, [[ isNumericRange ]]).
                1. Let _start_ be _O_.[[start]].
                1. Let _end_ be _O_.[[end]].
                1. Let _step_ be _O_.[[step]].
                1. Let _type_ be _O_.[[type]].
                1. Let _isInclusiveEnd_ be _O_.[[isInclusiveEnd]].
                1. If _type_ is *"bigint"*, let _zero_ be *0n*, else let _zero_ be *0*.
                1. If _type_ is *"bigint"*, let _one_ be *1n*, else let _one_ be *1*.
                1. Let _closure_ be a new Abstract Closure with no parameters that captures _start_, _end_, _step_, _type_, _isInclusiveEnd_, _zero_, _one_ and performs the following steps when called:
                    <!-- Early return -->
                    1. If _start_ is *NaN*, return *undefined*.
                    1. If _end_ is *NaN*, return *undefined*.
                    1. If _step_ is *NaN*, return *undefined*.
                    <!-- Direction mismatch -->
                    1. Let _ifIncrease_ be _end_ > _start_.
                    1. Let _ifStepIncrease_ to be _step_ > _zero_.
                    1. If _ifIncrease_ is not equal to _ifStepIncrease_, return *undeﬁned*.
                    <!-- Yield numbers -->
                    1. Let _hitsEnd_ be *false*.
                    1. Let _currentCount_ be _zero_.
                    1. Note: Debug these step at https://tc39.es/proposal-Number.range/playground.html
                    1. Repeat, while _hitsEnd_ is *false*:
                        1. Let _currentYieldingValue_ be _start_ + (_step_ \* _currentCount_).
                        1. If _currentYieldingValue_ equal to _end_, Set _hitsEnd_ to *true*.
                        1. Set _currentCount_ to _currentCount_ + _one_
                        <!-- Prevent value overflow -->
                        1. Let _endCondition_ be *false*.
                        1. If _ifIncrease_ is *true*
                            1. If _isInclusiveEnd_ is *true*, set _endCondition_ be _currentYieldingValue_ > _end_
                            1. Else set _endCondition_ be _currentYieldingValue_ >= _end_.
                        1. Else
                            1. If _isInclusiveEnd_ is *true*, set _endCondition_ be _end_ > _currentYieldingValue_
                            1. Else set _endCondition_ be _end_ >= _currentYieldingValue_.
                        1. If _endCondition_ is *true*, return *undeﬁned*.
                        1. Perform ? Yield(_currentYieldingValue_).
                    1. Return *undefined*.
                    <!-- Finish -->
                1. Let _iterator_ be ! CreateIteratorFromClosure(_closure_, ~NumericRange Iterator~, %NumericRangeIteratorPrototype%, &laquo; start, end, step, inclusiveEnd &raquo;).
                1. Return _iterator_.
            </emu-alg>
        </emu-clause>
        <emu-clause id="sec-numericrange.prototype-@@iterator">
            <h1>NumericRange.prototype[Symbol.iterator]</h1>
            <p>The initial value of the @@iterator property is the same function object as the initial value of the NumericRange.prototype.values() property.</p>
        </emu-clause>
        <emu-clause id="sec-numericrange.prototype-@@tostringtag">
            <h1>NumericRange.prototype [ @@toStringTag ]</h1>
            <p>The initial value of the @@toStringTag property is the String value "NumericRange".</p>
            <p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *true* }.</p>
        </emu-clause>
    </emu-clause>

    <emu-clause id="sec-properties-of-numericrange-instances">
        <h1>Properties of NumericRange Instances</h1>
        <p>NumericRange instances are ordinary objects that inherit properties from the NumericRange prototype object (the intrinsic, %NumericRange.prototype%). NumericRange instances are initially created with the internal slots described in <emu-xref href="#table-internal-slots-of-numericrange-instances"></emu-xref>.</p>
        <emu-table id="table-internal-slots-of-numericrange-instances" caption="Internal Slots of NumericRange Instances">
            <table>
                <tbody>
                    <tr>
                        <th>Internal Slot</th>
                        <th>Type</th>
                        <th>Description</th>
                    </tr>
                    <tr>
                        <td>[[type]]</td>
                        <td>Type of the NumericRange</td>
                        <td>Must be one of "number" or "bigint".</td>
                    </tr>
                    <tr>
                        <td>[[start]]</td>
                        <td>Start of the range</td>
                        <td>The start of the range.</td>
                    </tr>
                    <tr>
                        <td>[[step]]</td>
                        <td>Step of the range</td>
                        <td>The step of the range.</td>
                    </tr>
                    <tr>
                        <td>[[end]]</td>
                        <td>End of the range</td>
                        <td>The end of the range.</td>
                    </tr>
                    <tr>
                        <td>[[isInclusiveEnd]]</td>
                        <td>If the range is inclusive ended.</td>
                        <td>Must be a boolean.</td>
                    </tr>
                    <tr>
                        <td>[[isNumericRange]]</td>
                        <td>Mark this object is a NumericRange object.</td>
                        <td>Must be *true*.</td>
                    </tr>
                </tbody>
            </table>
        </emu-table>
    </emu-clause>
</emu-clause>

<emu-clause id="sec-properties-of-the-numericrangeiterator-prototype-object">
    <h1>Properties of the NumericRangeIterator Prototype Object</h1>
    <p>The NumericRangeIterator prototype object is the intrinsic object <dfn>%NumericRangeIteratorPrototype%</dfn>.</p>
    <p>The value has a [[Prototype]] internal slot whose value is the intrinsic object %IteratorPrototype%.</p>
    <emu-clause id="sec-properties-of-the-numericrangeiterator-prototype-object-next">
        <h1>%NumericRangeIterator%.next()</h1>
        <emu-alg>
            1. Return ? GeneratorResume(*this* value, *undefined*, ~NumericRange Iterator~).
        </emu-alg>
    </emu-clause>
    <emu-clause id="sec-properties-of-the-numericrangeiterator-prototype-object-@@tostringtag">
        <h1>%NumericRangeIterator% [ @@toStringTag ]</h1>
            <p>The initial value of the @@toStringTag property is the String value "NumericRange Iterator".</p>
            <p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *true* }.</p>
    </emu-clause>
</emu-clause>
