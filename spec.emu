<!DOCTYPE html>
<meta charset="utf8" />
<link rel="stylesheet" href="./spec.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css" />
<script src="./spec.js"></script>
<pre class="metadata">
title: Proposal Number.range & BigInt.range
stage: 1
contributors: "Jack Works"
</pre>

<emu-clause id="sec-variants">
    <h1>Variants</h1>
    <emu-note type="editor">
    There are still some behavior not decided yet and waiting for discussion. Leave as variable in the spec.
    <emu-alg>
    1. _isAcceptAlias_: `range(to)` treated as `range(0, to)`
    </emu-alg>
    </emu-note>
</emu-clause>
<emu-clause id="sec-number">
    <h1>Number</h1>
    <emu-clause id="sec-number-range">
        <h1>Number.range(_from_, _to_, _option_)</h1>
        <emu-alg>
            1. Return ? CreateRangeIterator(_from_, _to_, _option_, *"number"*).
        </emu-alg>
    </emu-clause>
</emu-clause>
<emu-clause id="sec-bigint">
    <h1>BigInt</h1>
    <emu-clause id="sec-bigint-range">
        <h1>BigInt.range(_from_, _to_, _option_)</h1>
        <emu-alg>
            1. Return ? CreateRangeIterator(_from_, _to_, _option_, *"bigint"*).
        </emu-alg>
    </emu-clause>
</emu-clause>
<emu-clause id="sec-algor">
    <h1>Algorithms</h1>
    <emu-clause id="sec-algor">
        <h1><dfn>CreateRangeIterator</dfn>(_from_, _to_, _option_, _type_)</h1>
        <emu-alg>
            1. If Type(_from_) is not _type_, throw a *TypeError* exception.
            1. Assert: _type_ is *"number"* or
            *"bigint"*
            1. If _type_ is *"bigint"*, let _zero_ be *0n*, else let _zero_ be *0*.
            1. If _type_ is *"bigint"*, let _one_ be *1n*, else let _one_ be *1*.
            1. Variants
                1. If variant _isAcceptAlias_ is *false*, do nothing.
                1. Else, if Type(_to_) is *"undefined"*, let _to_ be _from_, then _from_ be _zero_
            1. If _option_ is *undefined* or *null*, let _step_ = _one_.
                1. Else Type(_option_) is *object*, let _step_ = Get(_option_, "step").
                1. Else if Type(_option_) is _type_, let _step_ = _option_.
                1. Else, throw a *TypeError* exception.
            1. Note: <emu-note type="editor">Allowing all kinds of number (number, bigint, decimals, ...) to range from a finite number to infinity.</emu-note>
            1. If _to_ is not *+∞* or *-∞* and if Type(_to_) is not _type_, throw a *TypeError* exception.
            1. If _from_ is *+∞* or *-∞*, throws a *RangeError* exception.
            1. If _step_ is *+∞* or *-∞*, throws a *RangeError* exception.
            1. If _step_ is _zero_ and _from_ !== _to_, throws an *RangeError* exception.
            1. Let _iterator_ be ObjectCreate(%RangeIteratorPrototype%, « [[from]], [[to]], [[step]], [[type]], [[currentCount]] »).
            1. Set _iterator_.[[from]] to _from_.
            1. Set _iterator_.[[to]] to _to_.
            1. Set _iterator_.[[step]] to _step_.
            1. Set _iterator_.[[type]] to _type_.
            1. Set _iterator_.[[currentCount]] to _zero_.
            1. Return _iterator_.
        </emu-alg>
    </emu-clause>
</emu-clause>

<emu-clause id="sec-properties-of-the-rangeiterator-prototype-object">
    <h1>Properties of the RangeIterator Prototype Object</h1>
    <p>The RangeIterator prototype object is the intrinsic object <dfn>%RangeIteratorPrototype%</dfn>.</p>
    <p>The value has a [[Prototype]] internal slot whose value is the intrinsic object %IteratorPrototype%.</p>
    <emu-clause id="sec-properties-of-the-rangeiterator-prototype-object-next">
        <h1>%RangeIterator%.next()</h1>
        <emu-alg>
            1.  Let _iterator_ be the *this* value.
            1.  If Type(_iterator_) is not Object, throw a *TypeError* exception.
            1.  If _iterator_ does not have all of the internal slots of a Range Iterator Instance, throw a *TypeError* exception.
            <!-- Deconstruct variables -->
            1.  Let _from_ be _iterator_.[[from]].
            1.  Let _to_ be _iterator_.[[to]].
            1.  Let _step_ be _iterator_.[[step]].
            1.  Let _type_ be _iterator_.[[type]].
            1.  Assert: _type_ is *"number"* or *"bigint"*
            1. If _from_ == _to_, return CreateIterResultObject(*undefined*, *true*).
            1.  If _type_ is *"bigint"*, let _zero_ be *0n*, else let _zero_ be *0*
            1.  If _type_ is *"bigint"*, let _one_ be *1n*, else let _one_ be *1*
            <!-- Early return -->
            1.  If _from_ is *NaN*, return CreateIterResultObject(*undeﬁned*, *true*).
            1.  If _to_ is *NaN*, return CreateIterResultObject(*undeﬁned*, *true*).
            1.  If _step_ is *NaN*, return CreateIterResultObject(*undeﬁned*, *true*).
            <!-- Direction mismatch -->
            1.  Let _ifIncrease_ be `to > from`
            1.  Let _ifStepIncrease_ to be `step > zero`
            1. If _ifIncrease_ is not equal to _ifStepIncrease_, return CreateIterResultObject(*undeﬁned*, *true*).
            <!-- Yield numbers -->
            1. Note:
        <emu-note type="editor">
        In the playground it's fully implemented the spec step-by-step. https://tc39.es/proposal-Number.range/playground.html
        </emu-note>
            1.  Let _currentCount_ be _iterator_.[[currentCount]]
            1. Let _currentYieldingValue_ to be _from_ + (_step_ \* _currentCount_)
            1. Let _nextCount_ to _currentCount_ + _one_
            <!-- Prevent value overflow -->
            1. If _ifIncrease_ is *true* and _currentYieldingValue_ >= _to_, return CreateIterResultObject(*undeﬁned*, *true*).
            1. If _ifIncrease_ is *false* and _to_ >= _currentYieldingValue_, return CreateIterResultObject(*undeﬁned*, *true*).
            1. Set _iterator_.[[currentCount]] to _nextCount_
            1. Return CreateIterResultObject(_currentYieldingValue_, *false*).
            <!-- Finish -->
        </emu-alg>
    </emu-clause>
    <emu-clause id="sec-properties-of-the-rangeiterator-prototype-object-@@tostringtag">
        <h1>%RangeIteratorPrototype%.[@@toStringTag]</h1>
        <p>The initial value of the @@toStringTag property is the String value `"RangeIterator"`.</p>
        <p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *true* }.</p>
    </emu-clause>
    <emu-clause id="sec-properties-of-the-rangeiterator-prototype-object-from">
        <h1>%RangeIteratorPrototype%.from</h1>
        <p>%RangeIteratorPrototype%.from is an accessor property with attributes { [[Enumerable]]: false, [[Configurable]]: *true*}. The [[Get]] attribute is defined as follows: </p>
        <emu-clause id="sec-properties-of-the-rangeiterator-prototype-object-from-getter">
            <h1>get %RangeIteratorPrototype%.from</h1>
            <emu-alg>
                1. If *this* does not have a [[from]] internal slot, throw a *TypeError* exception.
                1. return *this*.[[from]]
            </emu-alg>
        </emu-clause>
    </emu-clause>
    <emu-clause id="sec-properties-of-the-rangeiterator-prototype-object-to">
        <h1>%RangeIteratorPrototype%.to</h1>
        <p>%RangeIteratorPrototype%.to is an accessor property with attributes { [[Enumerable]]: false, [[Configurable]]: *true*}. The [[Get]] attribute is defined as follows: </p>
        <emu-clause id="sec-properties-of-the-rangeiterator-prototype-object-to-getter">
            <h1>get %RangeIteratorPrototype%.to</h1>
            <emu-alg>
                1. If *this* does not have a [[to]] internal slot, throw a *TypeError* exception.
                1. return *this*.[[to]]
            </emu-alg>
        </emu-clause>
    </emu-clause>
    <emu-clause id="sec-properties-of-the-rangeiterator-prototype-object-step">
        <h1>%RangeIteratorPrototype%.step</h1>
        <p>%RangeIteratorPrototype%.step is an accessor property with attributes { [[Enumerable]]: false, [[Configurable]]: *true*}. The [[Get]] attribute is defined as follows: </p>
        <emu-clause id="sec-properties-of-the-rangeiterator-prototype-object-step-getter">
            <h1>get %RangeIteratorPrototype%.step</h1>
            <emu-alg>
                1. If *this* does not have a [[step]] internal slot, throw a *TypeError* exception.
                1. return *this*.[[step]]
            </emu-alg>
        </emu-clause>
    </emu-clause>
    <emu-clause id="sec-rangeiterator-slots">
        <h1>Internal slots</h1>
        <emu-table id="sec-rangeiterator-internal-slots" caption="Internal slots">
            <table>
            <thead>
            <tr>
            <td>Internal slot</td>
            <td>Description</td>
            <tr>
            </thead>
            <tbody>
            <tr><td>[[from]]</td><td>The range starts from.</td><tr>
            <tr><td>[[to]]</td><td>The range ends to.</td><tr>
            <tr><td>[[step]]</td><td>The range step size.</td><tr>
            <tr><td>[[type]]</td><td>Must be *"number"* or *"bigint"*.</td><tr>
            <tr>
            <td>[[currentCount]]</td>
            <td>The `integer index` of the last yielded value this iterator. Must be type of number or bigint.</td>
            </tbody>
            </table>
        </emu-table>
    </emu-clause>
</emu-clause>
